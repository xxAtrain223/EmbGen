#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <tinyxml2.h>
#include "EmbGen/EmbGen.hpp"
#include "EmbGen/Parser/Appendage.hpp"
#include "EmbGen/Exceptions.hpp"

using namespace testing;

namespace emb
{
    namespace gen
    {
        namespace test
        {
            TEST(embgen_EmbGen, no_appendages)
            {
                std::string config = "{}";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<1u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, all_stop);\n"
                    "\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Include)
            {
                std::string config =
                    R"({)"
                    R"(    "Include": {)"
                    R"(        "include_alpha": {},)"
                    R"(        "include_bravo": {})"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "#include \"HeaderOne.hpp\"\n"
                    "#include <HeaderTwo.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<1u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, all_stop);\n"
                    "\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Variable)
            {
                std::string config =
                    R"({)"
                    R"(    "Variable": {)"
                    R"(        "variable_alpha": {)"
                    R"(            "VarOne": 1,)"
                    R"(            "VarTwo": -2)"
                    R"(        },)"
                    R"(        "variable_bravo": {)"
                    R"(            "VarOne": 3,)"
                    R"(            "VarTwo": -4)"
                    R"(        })"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<1u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "uint8_t Variable_VarOne[2] = {\n"
                    "    1,\n"
                    "    3\n"
                    "};\n"
                    "int16_t Variable_VarTwo[2] = {\n"
                    "    -2,\n"
                    "    -4\n"
                    "};\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, all_stop);\n"
                    "\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Setup)
            {
                std::string config =
                    R"({)"
                    R"(    "Setup": {)"
                    R"(        "setup_alpha": {)"
                    R"(            "VarOne": 1,)"
                    R"(            "VarTwo": -2)"
                    R"(        },)"
                    R"(        "setup_bravo": {)"
                    R"(            "VarOne": 3,)"
                    R"(            "VarTwo": -4)"
                    R"(        })"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<1u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "uint8_t Setup_VarOne[2] = {\n"
                    "    1,\n"
                    "    3\n"
                    "};\n"
                    "int16_t Setup_VarTwo[2] = {\n"
                    "    -2,\n"
                    "    -4\n"
                    "};\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, all_stop);\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Setup_VarOne[i] += 1;\n"
                    "        Setup_VarTwo[i] -= 1;\n"
                    "    }\n"
                    "    delay(500);\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Setup_VarTwo[i] += 1;\n"
                    "        Setup_VarOne[i] -= 1;\n"
                    "    }\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Loop)
            {
                std::string config =
                    R"({)"
                    R"(    "Loop": {)"
                    R"(        "loop_alpha": {)"
                    R"(            "VarOne": 1,)"
                    R"(            "VarTwo": -2)"
                    R"(        },)"
                    R"(        "loop_bravo": {)"
                    R"(            "VarOne": 3,)"
                    R"(            "VarTwo": -4)"
                    R"(        })"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<1u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "uint8_t Loop_VarOne[2] = {\n"
                    "    1,\n"
                    "    3\n"
                    "};\n"
                    "int16_t Loop_VarTwo[2] = {\n"
                    "    -2,\n"
                    "    -4\n"
                    "};\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, all_stop);\n"
                    "\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Loop_VarOne[i]++;\n"
                    "        Loop_VarTwo[i]++;\n"
                    "    }\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Command)
            {
                std::string config =
                    R"({)"
                    R"(    "Command": {)"
                    R"(        "command_alpha": {)"
                    R"(            "VarOne": 1,)"
                    R"(            "VarTwo": -2)"
                    R"(        },)"
                    R"(        "command_bravo": {)"
                    R"(            "VarOne": 3,)"
                    R"(            "VarTwo": -4)"
                    R"(        })"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<3u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "uint8_t Command_VarOne[2] = {\n"
                    "    1,\n"
                    "    3\n"
                    "};\n"
                    "int16_t Command_VarTwo[2] = {\n"
                    "    -2,\n"
                    "    -4\n"
                    "};\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, Command_get_adaptor);\n"
                    "    myMessenger.registerCommand(1u, Command_set_adaptor);\n"
                    "    myMessenger.registerCommand(2u, all_stop);\n"
                    "\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "}\n"
                    "\n"
                    "void Command_get_adaptor()\n"
                    "{\n"
                    "    uint16_t i;\n"
                    "    uint8_t one;\n"
                    "    int16_t two;\n"
                    "    myMessenger.read(\n"
                    "        i, [](uint16_t i){ return i <= 1u; }\n"
                    "    );\n"
                    "    Command_get(\n"
                    "        i,\n"
                    "        one,\n"
                    "        two\n"
                    "    );\n"
                    "    myMessenger.write(\n"
                    "        one,\n"
                    "        two\n"
                    "    );\n"
                    "}\n"
                    "\n"
                    "void Command_get(uint16_t i, uint8_t& one, int16_t& two)\n"
                    "{\n"
                    "    one = Command_VarOne[i];\n"
                    "    two = Command_VarTwo[i];\n"
                    "}\n"
                    "\n"
                    "void Command_set_adaptor()\n"
                    "{\n"
                    "    uint16_t i;\n"
                    "    uint8_t one;\n"
                    "    int16_t two;\n"
                    "    myMessenger.read(\n"
                    "        i, [](uint16_t i){ return i <= 1u; },\n"
                    "        one,\n"
                    "        two, [](int16_t two){ return two >= -1024 && two <= 1024; }\n"
                    "    );\n"
                    "    Command_set(\n"
                    "        i,\n"
                    "        one,\n"
                    "        two\n"
                    "    );\n"
                    "}\n"
                    "\n"
                    "void Command_set(uint16_t i, uint8_t one, int16_t two)\n"
                    "{\n"
                    "    Command_VarOne[i] = one;\n"
                    "    Command_VarTwo[i] = two;\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Stop)
            {
                std::string config =
                    R"({)"
                    R"(    "Stop": {)"
                    R"(        "stop_alpha": {)"
                    R"(            "VarOne": 1,)"
                    R"(            "VarTwo": -2)"
                    R"(        },)"
                    R"(        "stop_bravo": {)"
                    R"(            "VarOne": 3,)"
                    R"(            "VarTwo": -4)"
                    R"(        })"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<2u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "uint8_t Stop_VarOne[2] = {\n"
                    "    1,\n"
                    "    3\n"
                    "};\n"
                    "int16_t Stop_VarTwo[2] = {\n"
                    "    -2,\n"
                    "    -4\n"
                    "};\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, Stop_stop);\n"
                    "    myMessenger.registerCommand(1u, all_stop);\n"
                    "\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "}\n"
                    "\n"
                    "void Stop_stop()\n"
                    "{\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Stop_VarOne[i] = 0;\n"
                    "        Stop_VarTwo[i] = 0;\n"
                    "    }\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "    Stop_stop();\n"
                    "}\n"
                    "\n"
                );
            }

            TEST(embgen_EmbGen, Everything)
            {
                std::string config =
                    R"({)"
                    R"(    "Everything": {)"
                    R"(        "everything_alpha": {)"
                    R"(            "VarOne": 1,)"
                    R"(            "VarTwo": -2)"
                    R"(        },)"
                    R"(        "everything_bravo": {)"
                    R"(            "VarOne": 3,)"
                    R"(            "VarTwo": -4)"
                    R"(        })"
                    R"(    })"
                    R"(})";
                std::string inoTemplate =
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "/*** EMBGEN_INCLUDES ***/\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "/*** EMBGEN_VARIABLES: myMessenger(&buffer, millis) ***/\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    /*** EMBGEN_REGISTER: registerCommand(); ***/\n"
                    "    /*** EMBGEN_SETUP ***/\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    /*** EMBGEN_LOOP ***/\n"
                    "}\n"
                    "\n"
                    "/*** EMBGEN_COMMANDS ***/\n";
                EmbGen embGen(config, "test/data/appendages", inoTemplate);

                ASSERT_EQ(embGen.generateSource(),
                    "#include <EmbMessenger/SerialBuffer.hpp>\n"
                    "#include <EmbMessenger/EmbMessenger.hpp>\n"
                    "\n"
                    "#include \"HeaderOne.hpp\"\n"
                    "#include <HeaderTwo.hpp>\n"
                    "\n"
                    "SerialBuffer<64> buffer(&Serial);\n"
                    "emb::device::EmbMessenger<5u, 0> myMessenger(&buffer, millis);\n"
                    "\n"
                    "uint8_t Everything_VarOne[2] = {\n"
                    "    1,\n"
                    "    3\n"
                    "};\n"
                    "int16_t Everything_VarTwo[2] = {\n"
                    "    -2,\n"
                    "    -4\n"
                    "};\n"
                    "\n"
                    "void setup()\n"
                    "{\n"
                    "    myMessenger.registerCommand(0u, Everything_get_adaptor);\n"
                    "    myMessenger.registerCommand(1u, Everything_set_adaptor);\n"
                    "    myMessenger.registerCommand(2u, Everything_zero_adaptor);\n"
                    "    myMessenger.registerCommand(3u, Everything_stop);\n"
                    "    myMessenger.registerCommand(4u, all_stop);\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Everything_VarOne[i] += 1;\n"
                    "        Everything_VarTwo[i] -= 1;\n"
                    "    }\n"
                    "    delay(500);\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Everything_VarTwo[i] += 1;\n"
                    "        Everything_VarOne[i] -= 1;\n"
                    "    }\n"
                    "}\n"
                    "\n"
                    "void loop()\n"
                    "{\n"
                    "    myMessenger.update();\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Everything_VarOne[i]++;\n"
                    "        Everything_VarTwo[i]++;\n"
                    "    }\n"
                    "}\n"
                    "\n"
                    "void Everything_get_adaptor()\n"
                    "{\n"
                    "    uint16_t i;\n"
                    "    uint8_t one;\n"
                    "    int16_t two;\n"
                    "    myMessenger.read(\n"
                    "        i, [](uint16_t i){ return i <= 1u; }\n"
                    "    );\n"
                    "    Everything_get(\n"
                    "        i,\n"
                    "        one,\n"
                    "        two\n"
                    "    );\n"
                    "    myMessenger.write(\n"
                    "        one,\n"
                    "        two\n"
                    "    );\n"
                    "}\n"
                    "\n"
                    "void Everything_get(uint16_t i, uint8_t& one, int16_t& two)\n"
                    "{\n"
                    "    one = Everything_VarOne[i];\n"
                    "    two = Everything_VarTwo[i];\n"
                    "}\n"
                    "\n"
                    "void Everything_set_adaptor()\n"
                    "{\n"
                    "    uint16_t i;\n"
                    "    uint8_t one;\n"
                    "    int16_t two;\n"
                    "    myMessenger.read(\n"
                    "        i, [](uint16_t i){ return i <= 1u; },\n"
                    "        one,\n"
                    "        two, [](int16_t two){ return two >= -1024 && two <= 1024; }\n"
                    "    );\n"
                    "    Everything_set(\n"
                    "        i,\n"
                    "        one,\n"
                    "        two\n"
                    "    );\n"
                    "}\n"
                    "\n"
                    "void Everything_set(uint16_t i, uint8_t one, int16_t two)\n"
                    "{\n"
                    "    Everything_VarOne[i] = one;\n"
                    "    Everything_VarTwo[i] = two;\n"
                    "}\n"
                    "\n"
                    "void Everything_zero_adaptor()\n"
                    "{\n"
                    "    uint16_t i;\n"
                    "    myMessenger.read(\n"
                    "        i, [](uint16_t i){ return i <= 1u; }\n"
                    "    );\n"
                    "    Everything_zero(\n"
                    "        i\n"
                    "    );\n"
                    "}\n"
                    "\n"
                    "void Everything_zero(uint16_t i)\n"
                    "{\n"
                    "    Everything_VarOne[i] = 0;\n"
                    "    Everything_VarTwo[i] = 0;\n"
                    "}\n"
                    "\n"
                    "void Everything_stop()\n"
                    "{\n"
                    "    for (uint16_t i = 0u; i <= 1u; ++i) {\n"
                    "        Everything_zero(i);\n"
                    "    }\n"
                    "}\n"
                    "\n"
                    "void all_stop()\n"
                    "{\n"
                    "    Everything_stop();\n"
                    "}\n"
                    "\n"
                );
            }
        }
    }
}